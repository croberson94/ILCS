// Filename: NTP2.4Dino
// Description: more testing
//
//

// DECLARATIONS
#include <Wire.h>
#define SSID "HCCpublic"
#define PASSWORD ""
unsigned long epoch, hour_NTP, min_NTP, sec_NTP;
unsigned long NTPSyncTime;
unsigned long NTPCalcTime;
uint16_t seconds, minutes, hours ;
const int NTP_PACKET_SIZE = 48;
byte packetBuffer[NTP_PACKET_SIZE];
String ATresponse ;
word hndl ;
int GMT0 = 0, GMT1 = 0, GMT2 = 0, GMT3 = 0, GMT4 = 0;
int GMO1 = 0, GMO2 = 0, GMO3 = 0, GMO4 = 0, GMO5 = 0;
int Wbs1 = 0;
int iWinbutton1, iWinbutton2, iWinbutton3, iWinbutton4;
int iWinbutton5, iWinbutton6, iWinbutton7, iWinbutton8;
int iWinbutton9, iWinbutton10, iWinbutton11, iWinbutton12;
byte quad_offset = B00000000;

// Define LOG_MESSAGES to a serial port to send SPE errors messages to. Do not use the same Serial port as SPE
//#define LOG_MESSAGES Serial

%%Display%%.DefineResetLine ;      // *Replaced* at compile time with define for reset line connected to the display
%%Display%%.DefineDisplaySerialx ; // *Replaced* at compile time with define the Serial Port connected to the display

#include "NTP2Const.h"

%%Display%%.IncludeSerial_4DLib ;          // *Replaced* at compile time with an Include the Serial Library relevant to the display
%%Display%%.IncludeSerial_Const4D ;        // *Replaced* at compile time with an Include the Constants file relevant to the display

%%Display%%.AssignDisplaySerialtoLibrary ; // *Replaced* at compile time with an Assign of the correct Serial port to the correct library

// Uncomment to use ESP8266
#define ESPRESET 17
#include <SoftwareSerial.h>
#define ESPserial SerialS
SoftwareSerial SerialS(8, 9) ;
// Uncomment next 2 lines to use ESP8266 with ESP8266 library from https://github.com/itead/ITEADLIB_Arduino_WeeESP8266
//#include "ESP8266.h"
//ESP8266 wifi(SerialS,19200);

// routine to handle Serial errors
void mycallback(int ErrCode, unsigned char Errorbyte)
{
#ifdef LOG_MESSAGES
  const char *Error4DText[] = {"OK\0", "Timeout\0", "NAK\0", "Length\0", "Invalid\0"} ;
  LOG_MESSAGES.print(F("Serial 4D Library reports error ")) ;
  LOG_MESSAGES.print(Error4DText[ErrCode]) ;
  if (ErrCode == Err4D_NAK)
  {
    LOG_MESSAGES.print(F(" returned data= ")) ;
    LOG_MESSAGES.println(Errorbyte) ;
  }
  else
    LOG_MESSAGES.println(F("")) ;
  while (1) ; // you can return here, or you can loop
#else
  // Pin 13 has an LED connected on most Arduino boards. Just give it a name
#define led 13
  while (1)
  {
    digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(200);                // wait for a second
    digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
    delay(200);                // wait for a second
  }
#endif
}
// end of routine to handle Serial errors

bool ATcmdResp(String /*char * */ cmd, int tlimit)
{
  String str1 ;
  ATresponse = "" ;
#ifdef ESP_DEBUG
  Serial.print(F("CMD>")) ;
  Serial.println(cmd) ;
#endif
  ESPserial.print(cmd) ;
  //  ESPserial.setTimeout(tlimit) ;              // this gives us no real advantage
  unsigned long sttm = millis() ;
  while (sttm + tlimit > millis())
  {
    str1 = ESPserial.readStringUntil(0x0a) ;    // note 0x0a will not be included!
    if (str1 == "")                             // ignore null response
    {
    }
    else if (str1 == "OK\r")                    // exit with ok response
    {
#ifdef ESP_DEBUG
      Serial.println(F("OK>")) ;
#endif
      return 1 ;
      break ;
    }
    else if (str1 == "ERROR\r")                 // exit with error response
    {
#ifdef ESP_DEBUG
      Serial.println(F("ERROR>")) ;
#endif
      return 0 ;
      break ;
    }
    else if (str1.endsWith("\r\r"))             // ignore original command echo
    {
#ifdef ESP_DEBUG
      Serial.print(F("cmd>")) ;
      Serial.println(str1) ;
#endif
    }
    else                                        // otherwise concat into response string
    {
#ifdef ESP_DEBUG
      Serial.print(F("IN>")) ;
      Serial.println(str1) ;
#endif
      ATresponse += str1 ;
      ATresponse += "\n" ;                    // because it was lost earlier
    }
  }
#ifdef ESP_DEBUG
  Serial.print(F("TIMEOUT>")) ;
#endif
  return 0 ;     // timeout
}
// End of routine to send command to the ESP8266 and wait for a response

boolean connectWiFi()
{
  String cmd = F("AT+CWJAP=\"");  // use Flash constants to avoid using up all RAM
  cmd += SSID;
  cmd += F("\",\"");              // use Flash constants to avoid using up all RAM
  cmd += PASSWORD;
  cmd += F("\"\r\n");             // use Flash constants to avoid using up all RAM
  //Display.print(F("Attempting Connection to WiFi\n"));  // use Flash constants to avoid using up all RAM

  for (int z = 0; z < 5; z++)
  {
    // allow sufficient time for responses, otherwise we can end up 'busy'
    // this command will return as soon as result is available, it will not always 'wait' max time
    // this commaand also leaves the result in ATresponse, so errors can be printed
    // it also allows diagnostics to be printed on the serial port
    if (ATcmdResp(cmd, 7000))
    {
      Display.print("Connected to WiFi: ");
      Display.print(SSID);
      Display.print("\n");
      return true;
    }
    else
    {
      Display.print(ATresponse);
      Display.print(".");
    }
  }
  return false;
}

String NTPTime(int GMT)
{
  String temp;

  hour_NTP = (((epoch  % 86400L) / 3600) + GMT) %24 ;   // must %24 to ensure countries ahead don't end up more than 24 hours
  min_NTP = (epoch  % 3600) / 60;
  sec_NTP = epoch  % 60;

  if (hour_NTP < 10)
    temp = String(0) + String(hour_NTP);
  else
    temp = String(hour_NTP);
  temp += ":";
  if (min_NTP < 10)
    temp += String(0) + String(min_NTP);
  else
    temp += String(min_NTP);
  temp += ":";
  if (sec_NTP < 10)
    temp += String(0) + String(sec_NTP);
  else
    temp += String(sec_NTP);
  temp += "    ";

  return temp;
}

unsigned long GetTime()
{
  //130.102.128.23
  //128.138.140.44
  //24.56.178.140
  String cmd = "AT+CIPSTART=\"UDP\",\"129.6.15.28\",123\r\n"; // NTP server

  ESPserial.println(cmd);
  delay(2000);

  int counta = 0;
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;

  ESPserial.print("AT+CIPSEND=");
  ESPserial.println(NTP_PACKET_SIZE);
  if (ESPserial.find(">"))
  {
    for (byte i = 0; i < NTP_PACKET_SIZE; i++)
    {
      ESPserial.write(packetBuffer[i]);
      delay(5);
    }
  }
  else
  {
    ESPserial.println("AT+CIPCLOSE");
    return 0;
  }
  delay(50);
  ESPserial.find("+IPD,48:");

  memset(packetBuffer, 0, NTP_PACKET_SIZE);

  Serial.println("Server answer : ");

  int i = 0;
  while (ESPserial.available() > 0)
  {
    byte ch = ESPserial.read();
    if (i <= NTP_PACKET_SIZE)
    {
      packetBuffer[i] = ch;
    }
    if (ch < 0x10) Serial.print('0');
    Serial.print(ch, HEX);
    Serial.print(' ');
    if ( (((i + 1) % 15) == 0) )
    {
      Serial.println();
    }
    delay(5);
    i++;
    if ( ( i < NTP_PACKET_SIZE ) && (ESPserial.available() == 0 ) )
    {
      while (ESPserial.available() == 0)  // you may have to wait for some bytes
      {
        counta += 1;
        Serial.print("!");
        delay(100);
        if (counta == 15)
        {
          return 0;
        }
      }
    }
  }

  Serial.println();
  Serial.println();
  Serial.print(i + 1);
  Serial.println(" bytes received"); // will be more than 48

  Serial.print(packetBuffer[40], HEX);
  Serial.print(" ");
  Serial.print(packetBuffer[41], HEX);
  Serial.print(" ");
  Serial.print(packetBuffer[42], HEX);
  Serial.print(" ");
  Serial.print(packetBuffer[43], HEX);
  Serial.print(" = ");

  unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
  unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);

  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;

  Serial.print(secsSince1900, DEC);

  // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
  const unsigned long seventyYears  = 2208988800UL;
  // subtract seventy years:
  unsigned long epochCalc = secsSince1900 - seventyYears;

  unsigned long DST = 60 * 60 * 2; // adjust to your GMT+DST

  unsigned long timestamp = epoch + DST;

  Serial.println();
  Serial.print("Epoch: ");
  Serial.println(epochCalc, DEC);


  // print the hour, minute and second:
  Serial.print("The UTC time is ");       // UTC is the time at Greenwich Meridian (GMT)
  Serial.print((epochCalc  % 86400L) / 3600); // print the hour (86400 equals secs per day)
  Serial.print(':');
  if ( ((epochCalc % 3600) / 60) < 10 )
  {
    // In the first 10 minutes of each hour, we'll want a leading '0'
    Serial.print('0');
  }
  Serial.print((epochCalc  % 3600) / 60); // print the minute (3600 equals secs per minute)
  Serial.print(':');
  if ( (epochCalc % 60) < 10 )
  {
    // In the first 10 seconds of each minute, we'll want a leading '0'
    Serial.print('0');
  }
  Serial.println(epochCalc % 60); // print the second
  return epochCalc;
}

void setup()
{
// Ucomment to use the Serial link to the PC for debugging
    Serial.begin(115200) ;        // serial to USB port
// Note! The next statement will stop the sketch from running until the serial monitor is started
//       If it is not present the monitor will be missing the initial writes
//    while (!Serial) ;             // wait for serial to be established

  pinMode(RESETLINE, OUTPUT);       // Display reset pin
%%Display%%.Toggle_Reset_On ;       // *Replaced* at compile time with correct rest on logic for the attached display
  delay(100);                       // wait for it to be recognised
%%Display%%.Toggle_Reset_Off ;      // *Replaced* at compile time with correct rest off logic for the attached display
// Uncomment when using ESP8266
  pinMode(ESPRESET, OUTPUT);        // ESP reset pin
  digitalWrite(ESPRESET, 1);        // Reset ESP
  delay(100);                       // wait for it t
  digitalWrite(ESPRESET, 0);        // Release ESP reset
  delay(3000) ;                     // give display time to startup

  // now start display as Serial lines should have 'stabilised'
  %%Display%%.DisplaySerial.Begin_Speed ; // *Replaced* at compile time with command to start the serial port at the correct speed
  Display.TimeLimit4D = 5000 ;      // 5 second timeout on all commands
  Display.Callback4D = mycallback ;

// uncomment if using ESP8266
    ESPserial.begin(115200) ;         // assume esp set to 115200 baud, it's default setting
                                    // what we need to do is attempt to flip it to 19200
                                    // the maximum baud rate at which software serial actually works
                                    // if we run a program without resetting the ESP it will already be 19200
                                    // and hence the next command will not be understood or executed
  ESPserial.println("AT+UART_CUR=19200,8,1,0,0\r\n") ;
  ESPserial.end() ;
  delay(10) ;                         // Necessary to allow for baud rate changes
  ESPserial.begin(19200) ;            // start again at a resonable baud rate
  Display.gfx_ScreenMode(PORTRAIT) ; // change manually if orientation change
  //Display.putstr("Mounting...\n");
  if (!(Display.file_Mount()))
  {
    while(!(Display.file_Mount()))
    {
      Display.putstr("Drive not mounted...");
      delay(200);
      Display.gfx_Cls();
      delay(200);
    }
  }
//hFontn = Display.file_LoadImageControl("NoName2.dnn", "NoName2.gnn", 1); // Open handle to access uSD fonts, uncomment if required and change nn to font number
//hstrings = Display.file_Open("NTP2~1.txf", 'r') ;                            // Open handle to access uSD strings, uncomment if required
  hndl = Display.file_LoadImageControl("NTP2~1.dat", "NTP2~1.gci", 1);
  // put your setup code here, to run once:



  // Beginning Text
  Display.txt_FGcolour(BLUE) ;
  Display.txt_FontID(FONT1) ;         // largest internal font
  Display.putstr("ILCS Systems\n") ;

  String temp1 = "User Network: ";
  temp1 += SSID;
  temp1 += "\r\n";
  Display.print(temp1);
  //Display.print("Connecting to Wifi AP: " + SSID + "\n") ;

  ATcmdResp(F("AT+CWMODE_CUR=1\r\n"), 50);

  //ESPserial.println("AT+CWDHCP_CUR=1,1\r\n") ;// Activate the DHCP of 4DUINO , try to uncomment if router is already allocating DHCP
  //delay(1000);
   ATcmdResp(F("AT+CWDHCP_CUR=1,1\r\n"), 5000);

  //Only required if ESP doesnt have a MAC set, and AP uses Mac Filtering
  //ATcmdResp(F("AT+CIPSTAMAC_CUR=\"18:aa:35:97:d4:7b\"\r\n"), 50);

  if (connectWiFi()) // Attempt connection 5 times
  {
    Display.print("Wifi Connected\n");
  }
  else
  {
    Display.print("Wifi Disconnected\n");
    Display.print("Check WiFi, Restart 4Duino\n");
    while (1); // crash here
  }

  ATcmdResp(F("AT+CIFSR\r\n"), 100);
  delay(250);
  ATcmdResp(F("AT+CIPMUX=0\r\n"), 100); //if (!cipmux0()) hang("cipmux0 failed");
  delay(250);
  ATcmdResp(F("AT+CIPMODE=0\r\n"), 100); //if (!cipmode0()) hang("cipmode0 failed");
  delay(250);

  // Button Lineup
  Wbs1 = 0; // up, set to non zero (specifically 2) when down
  Display.img_SetWord(hndl, iWinbutton1, IMAGE_INDEX, 0); // Q1M where state is 0 for up and 1 for down
  Display.img_ClearAttributes(hndl, iWinbutton1, I_TOUCH_DISABLE); // Q1M set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton1);  // Q1M show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton2, I_TOUCH_DISABLE); // Q1P set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton2);  // Q1P show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton3, I_TOUCH_DISABLE); // Q2M set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton3);  // Q2M show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton2, I_TOUCH_DISABLE); // Q1P set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton2);  // Q1P show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton3, I_TOUCH_DISABLE); // Q2M set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton3);  // Q2M show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton4, I_TOUCH_DISABLE); // Winbutton4 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton4);  // Winbutton4 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton5, I_TOUCH_DISABLE); // Winbutton5 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton5);  // Winbutton5 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton6, I_TOUCH_DISABLE); // Winbutton6 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton6);  // Winbutton6 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton7, I_TOUCH_DISABLE); // Winbutton7 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton7);  // Winbutton7 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton8, I_TOUCH_DISABLE); // Winbutton8 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton8);  // Winbutton8 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton9, I_TOUCH_DISABLE); // Winbutton9 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton9);  // Winbutton9 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton10, I_TOUCH_DISABLE); // Winbutton10 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton10);  // Winbutton10 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton11, I_TOUCH_DISABLE); // Winbutton11 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton11);  // Winbutton11 show button, only do this once
  Display.img_ClearAttributes(hndl, iWinbutton12, I_TOUCH_DISABLE); // Winbutton12 set to enable touch, only need to do this once
  Display.img_Show(hndl, iWinbutton12);  // Winbutton12 show button, only do this once
  Display.touch_Set(TOUCH_ENABLE); // enable the touch screen
  // Wire Communicatoins
  Wire.begin();
} // end Setup **do not alter, remove or duplicate this line**

void loop()
{
  int i, x, y, state, n;
  state = Display.touch_Get(TOUCH_STATUS);
  n = Display.img_Touched(hndl, -1);
  // put your main code here, to run repeatedly:
  if (millis() > NTPSyncTime){
  NTPSyncTime = millis() + 5000;
  epoch = GetTime();
  }
  if (millis() > NTPCalcTime){
  NTPCalcTime = millis() + 5000;
  Display.txt_FontID(FONT1);

  // GMT Display Time
  Display.txt_MoveCursor(9,0);
  Display.txt_FGcolour(RED);
  Display.print("GMT Time: ");
  String temp0 = NTPTime(GMT0);
  Display.txt_FGcolour(LIME);
  Display.println(temp0);

  // Quadrant 1 Display Time
  Display.txt_MoveCursor(10,0);
  Display.txt_FGcolour(YELLOW);
  Display.print("Quad 1: ");
  String temp1 = NTPTime(GMT1);
  Display.txt_FGcolour(LIME);
  Display.println(temp1);

  // Quadrant 2 Display Time
  Display.txt_MoveCursor(11,0);
  Display.txt_FGcolour(YELLOW);
  Display.print("Quad 2: ");
  String temp2 = NTPTime(GMT2);
  Display.txt_FGcolour(LIME);
  Display.println(temp2);

  // Quadrant 3 Display Time
  Display.txt_MoveCursor(12,0);
  Display.txt_FGcolour(YELLOW);
  Display.print("Quad 3: ");
  String temp3 = NTPTime(GMT3);
  Display.txt_FGcolour(LIME);
  Display.println(temp3);

  // Quadrant 4 Display Time
  Display.txt_MoveCursor(13,0);
  Display.txt_FGcolour(YELLOW);
  Display.print("Quad 4: ");
  String temp4 = NTPTime(GMT4);
  Display.txt_FGcolour(LIME);
  Display.println(temp4);
  }

  // Touched a button?
  if (state == TOUCH_PRESSED){
  x = Display.touch_Get(TOUCH_GETX);
  y = Display.touch_Get(TOUCH_GETY);
  if (n == iWinbutton1){
    Display.img_SetWord(hndl, iWinbutton1, IMAGE_INDEX, Wbs1+1);
    Display.img_Show(hndl,iWinbutton1);
  }
  if (n == iWinbutton2){
  Display.img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton2);
  }
  if (n == iWinbutton3){
  Display.img_SetWord(hndl, iWinbutton3, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton3);
  }
  if (n == iWinbutton4){
  Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton4);
  }
  if (n == iWinbutton5){
  Display.img_SetWord(hndl, iWinbutton5, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton5);
  }
  if (n == iWinbutton6){
  Display.img_SetWord(hndl, iWinbutton6, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton6);
  }
  if (n == iWinbutton7){
  Display.img_SetWord(hndl, iWinbutton7, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton7);
  }
  if (n == iWinbutton8){
  Display.img_SetWord(hndl, iWinbutton8, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton8);
  }
  if (n == iWinbutton9){
  Display.img_SetWord(hndl, iWinbutton9, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton8);
  }
  if (n == iWinbutton10){
  Display.img_SetWord(hndl, iWinbutton10, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton8);
  }
  if (n == iWinbutton11){
  Display.img_SetWord(hndl, iWinbutton11, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton8);
  }
  if (n == iWinbutton12){
  Display.img_SetWord(hndl, iWinbutton12, IMAGE_INDEX, Wbs1+1);
  Display.img_Show(hndl, iWinbutton8);
  }
  }

  // Released a button?
  if (state == TOUCH_RELEASED){
  if (n == iWinbutton1){
    if (Wbs1) // toggle status
      Wbs1 = 0;
    else
      Wbs1 = 1;
    Display.img_SetWord(hndl, iWinbutton1, IMAGE_INDEX, Wbs1);
    Display.img_Show(hndl, iWinbutton1);
  // have a counter for the number of times you can go negative
  if (GMO1 >= -24){
    GMO1 -= 1;
    GMT1 -= 1;
  }
  if ((GMT1 <= 16) && (GMT1 >= 0)){
    quad_offset = (byte) GMT1;
    quad_offset = quad_offset << 2;
  }
  }
  if (n == iWinbutton2){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton2, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton2);
  // have a counter for the number of times you can go positive
  if (GMO1 <= 24){
    GMO1 += 1;
    GMT1 += 1;
  }
  if ((GMT1 <= 16) && (GMT1 >= 0)){
    quad_offset = (byte) GMT1;
    quad_offset = quad_offset << 2;
  }
  }
  if (n == iWinbutton3){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton3, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton3);
  // have a counter for the number of times you can go positive
  if (GMO2 >= -24){
    GMO2 -= 1;
    GMT2 -= 1;
  }
  if ((GMT2 <= 16) && (GMT2 >= 0)){
    quad_offset = (byte) GMT2;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111101;
  }
  }
  if (n == iWinbutton4){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 2;
  Display.img_SetWord(hndl, iWinbutton4, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton4);
  // have a counter for the number of times you can go positive
  if (GMO2 <= 24){
    GMO2 += 1;
    GMT2 += 1;
  }
  if ((GMT2 <= 16) && (GMT2 >= 0)){
    quad_offset = (byte) GMT2;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111101;
  }
  }
  if (n == iWinbutton5){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton5, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton5);
  // have a counter for the number of times you can go positive
  if (GMO3 >= -24){
    GMO3 -= 1;
    GMT3 -= 1;
  }
  if ((GMT3 <= 16) && (GMT3 >= 0)){
    quad_offset = (byte) GMT3;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111110;
  }
  }
  if (n == iWinbutton6){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton6, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton6);
  // have a counter for the number of times you can go positive
  if (GMO3 <= 24){
    GMO3 += 1;
    GMT3 += 1;
  }
  if ((GMT3 <= 16) && (GMT3 >= 0)){
    quad_offset = (byte) GMT3;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111110;
  }
  }
  if (n == iWinbutton7){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton7, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton7);
  // have a counter for the number of times you can go positive
  if (GMO4 >= -24){
    GMO4 -= 1;
    GMT4 -= 1;
  }
  if ((GMT4 <= 16) && (GMT4 >= 0)){
    quad_offset = (byte) GMT4;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111111;
  }
  }
  if (n == iWinbutton8){
  if (Wbs1)
    Wbs1 = 0;
  else
    Wbs1 = 1;
  Display.img_SetWord(hndl, iWinbutton8, IMAGE_INDEX, Wbs1);
  Display.img_Show(hndl, iWinbutton8);
  // have a counter for the number of times you can go positive
  if (GMO4 <= 24){
    GMO4 += 1;
    GMT4 += 1;
  }
  if ((GMT4 <= 16) && (GMT4 >= 0)){
    quad_offset = (byte) GMT4;
    quad_offset = quad_offset << 2;
    quad_offset = quad_offset && B11111111;
  }
  }
  if (n == iWinbutton9){
    if (Wbs1)
        Wbs1 = 0;
    else
        Wbs1 = 1;
    Display.img_SetWord(hndl, iWinbutton9, IMAGE_INDEX, Wbs1);
    Display.img_Show(hndl, iWinbutton9);
    quad_offset = B11000000;
  }
  if (n == iWinbutton10){
    if (Wbs1)
        Wbs1 = 0;
    else
        Wbs1 = 1;
    Display.img_SetWord(hndl, iWinbutton10, IMAGE_INDEX, Wbs1);
    Display.img_Show(hndl, iWinbutton10);
    quad_offset = B11000001;
  }
  if (n == iWinbutton11){
    if (Wbs1)
        Wbs1 = 0;
    else
        Wbs1 = 1;
    Display.img_SetWord(hndl, iWinbutton11, IMAGE_INDEX, Wbs1);
    Display.img_Show(hndl, iWinbutton11);
    quad_offset = B11000010;
  }
  if (n == iWinbutton12){
    if (Wbs1)
        Wbs1 = 0;
    else
        Wbs1 = 1;
    Display.img_SetWord(hndl, iWinbutton12, IMAGE_INDEX, Wbs1);
    Display.img_Show(hndl, iWinbutton12);
    quad_offset = B11000011;
  }
  }
  // Send out the byte to the Arduino, in any case
  Wire.beginTransmission(8); // we need an address value
  Wire.write(quad_offset);
  Wire.endTransmission(8);
  delay(500);

}


